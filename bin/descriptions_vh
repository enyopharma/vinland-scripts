#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use Data::Dumper;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'drakkar', $ENV{'DB_PROD_HOSTNAME'}),
    $ENV{'DB_PROD_USERNAME'},
    $ENV{'DB_PROD_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'vinland', $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_descriptions_sth = $drakkar->prepare('
    SELECT pmid, psimi_id, accession1, name1, accession2, name2
    FROM dataset
    WHERE type = \'vh\'
    AND state = \'curated\'
    AND is_obsolete1 IS FALSE
    AND is_obsolete2 IS FALSE
    AND deleted_at IS NULL
    ORDER BY accession1 ASC, accession2 ASC
');

my $select_method_sth = $vinland->prepare('
    SELECT * FROM methods WHERE psimi_id = ?
');

my $select_publication_sth = $vinland->prepare('
    SELECT * FROM publications WHERE pmid = ?
');

my $select_protein_sth = $vinland->prepare('
    SELECT * FROM proteins WHERE accession = ? AND name = ?
');

my $select_interaction_sth = $vinland->prepare('
    SELECT * FROM interactions WHERE protein1_id = ? AND protein2_id = ?
');

my @descriptions = ();

$select_descriptions_sth->execute;

while (my $description = $select_descriptions_sth->fetchrow_hashref) {
    $select_method_sth->execute($description->{'psimi_id'});
    my $method = $select_method_sth->fetchrow_hashref;
    $select_method_sth->finish;

    die('method not found') unless $method;

    $select_publication_sth->execute($description->{'pmid'});
    my $publication = $select_publication_sth->fetchrow_hashref;
    $select_publication_sth->finish;

    die('publication not found') unless $publication;

    $select_protein_sth->execute($description->{'accession1'}, $description->{'name1'});
    my $protein1 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $description->{'accession1'}, $description->{'name1'})) unless $protein1;

    $select_protein_sth->execute($description->{'accession2'}, $description->{'name2'});
    my $protein2 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $description->{'accession2'}, $description->{'name2'})) unless $protein2;

    $select_interaction_sth->execute($protein1->{'id'}, $protein2->{'id'});
    my $interaction = $select_interaction_sth->fetchrow_hashref;
    $select_interaction_sth->finish;

    die(sprintf('interaction not found %s - %s', $protein1->{'id'}, $protein2->{'id'})) unless $interaction;

    push(@descriptions, [
        $publication->{'pmid'},
        $method->{'id'},
        $interaction->{'id'},
        '{ENYO}',
    ]);
}

$select_descriptions_sth->finish;

$vinland->do('COPY descriptions (pmid, method_id, interaction_id, sources) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@descriptions);

$vinland->pg_putcopyend();

#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use List::Util qw(uniq);
use Sort::Key::Natural qw(natsort);
use Data::Dumper;

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'vinland', $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_method_sth = $vinland->prepare('
    SELECT * FROM methods WHERE psimi_id = ?
');

my $select_protein_sth = $vinland->prepare('
    SELECT * FROM proteins WHERE type = \'h\' AND accession = ?
');

my $select_interaction_sth = $vinland->prepare('
    SELECT * FROM interactions WHERE protein1_id = ? AND protein2_id = ?
');

my %descriptions = ();

while (my $line = <>) {
    chomp $line;

    my @parts = split("\t", $line);

    my ($acc1) = $parts[0] =~ /^\s*NX_([-A-Z0-9]+)\s*$/;
    my ($acc2) = $parts[1] =~ /^\s*NX_([-A-Z0-9]+)\s*$/;
    my ($source) = $parts[2] =~ /^\s*([A-Za-z0-9]+)\s*$/;
    my ($psimi_id) = $parts[4] =~ /^\s*(MI:[0-9]{4})\s*$/;
    my ($pmid) = $parts[5] =~ /\s*([0-9]+)\s*/;

    die('no source') unless $source;

    next if $acc1 =~ /-[0-9]+$/;
    next if $acc2 =~ /-[0-9]+$/;

    $psimi_id = 'MI:0045' unless $psimi_id;
    $pmid = '00000000' unless $pmid;

    my ($accession1, $accession2) = sort { $a cmp $b } ($acc1, $acc2);

    if ($descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}) {
        push(@{$descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'sources'}}, $source);
        next;
    }

    $select_method_sth->execute($psimi_id);
    my $method = $select_method_sth->fetchrow_hashref;
    $select_method_sth->finish;

    print sprintf('method %s not found', $psimi_id) . "\n" unless $method;

    $select_protein_sth->execute($accession1);
    my $protein1 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s', $accession1)) unless $protein1;

    $select_protein_sth->execute($accession2);
    my $protein2 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s', $accession2)) unless $protein2;

    $select_interaction_sth->execute($protein1->{'id'}, $protein2->{'id'});
    my $interaction = $select_interaction_sth->fetchrow_hashref;
    $select_interaction_sth->finish;

    die(sprintf('interaction not found %s - %s', $protein1->{'id'}, $protein2->{'id'})) unless $interaction;

    $descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'method_id'} = $method->{'id'};
    $descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'interaction_id'} = $interaction->{'id'};
    $descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'sources'} = [$source];
}

$vinland->do('COPY descriptions (pmid, method_id, interaction_id, sources) FROM STDIN');

foreach my $accession1 (natsort keys %descriptions) {
    foreach my $accession2 (natsort keys %{$descriptions{$accession1}}) {
        foreach my $pmid (natsort keys %{$descriptions{$accession1}->{$accession2}}) {
            foreach my $psimi_id (natsort keys %{$descriptions{$accession1}->{$accession2}->{$pmid}}) {
                $vinland->pg_putcopydata(join("\t", (
                    $pmid,
                    $descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'method_id'},
                    $descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'interaction_id'},
                    '{' . join(',', natsort uniq @{$descriptions{$accession1}->{$accession2}->{$pmid}->{$psimi_id}->{'sources'}}) . '}',
                )) . "\n");
            }
        }
    }
}

$vinland->pg_putcopyend();

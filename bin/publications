#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use JSON qw(from_json);
use Data::Dumper;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'drakkar', $ENV{'DB_PROD_HOSTNAME'}),
    $ENV{'DB_PROD_USERNAME'},
    $ENV{'DB_PROD_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'vinland', $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_publications_sth = $drakkar->prepare('
    SELECT DISTINCT pmid
    FROM dataset
    WHERE type = \'vh\'
    AND state = \'curated\'
    AND is_obsolete1 IS FALSE
    AND is_obsolete2 IS FALSE
    AND deleted_at IS NULL
');

my $select_publication_sth = $drakkar->prepare('
    SELECT metadata FROM publications WHERE pmid = ?
');

my @publications = ();

$select_publications_sth->execute;

while (my ($pmid) = $select_publications_sth->fetchrow_array) {
    $select_publication_sth->execute($pmid);
    my $publication = $select_publication_sth->fetchrow_hashref;
    $select_publication_sth->finish;

    my $metadata = from_json($publication->{'metadata'});

    if ($metadata->{'PubmedArticle'}) {
        my $article = $metadata->{'PubmedArticle'}->{'MedlineCitation'}->{'Article'};

        my $title = $article->{'ArticleTitle'};
        my $year = $article->{'Journal'}->{'JournalIssue'}->{'PubDate'}->{'Year'}
             // $article->{'Journal'}->{'JournalIssue'}->{'PubDate'}->{'MedlineDate'};

        $year =~ s/^.*?([0-9]{4}).*?$/$1/;

        die(sprintf('%s: no title', $pmid)) if (!$title || $title =~ /^\s*?$/);
        die(sprintf('%s: no year', $pmid)) if (!$year || $year =~ /^\s*?$/);
        die(sprintf('%s: malformated year', $pmid)) if ($year !~ /^[0-9]{4}$/);

        push(@publications, [$pmid, $title, $year]);
    }

    if ($metadata->{'PubmedBookArticle'}) {
        die(sprintf('%s: book not handled yet', $pmid));
    }
}

$select_publications_sth->finish;

$vinland->do('COPY publications (pmid, title, year) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@publications);

$vinland->pg_putcopyend();

#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use Sort::Key::Natural qw(natsort);
use Data::Dumper;

my $vinland_db = shift @ARGV or die('no vinland db');

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $vinland_db, $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_method_sth = $vinland->prepare('
    SELECT * FROM methods WHERE psimi_id = ?
');

my $select_protein_sth = $vinland->prepare('
    SELECT * FROM proteins WHERE type = \'h\' AND accession = ?
');

my %interactions = ();

while (my $line = <>) {
    $line =~ s/[\n\r]+$//;

    next if $line eq '';

    my @parts = split(',', $line);

    my ($acc1) = $parts[0] =~ /^\s*NX_([A-Z0-9]+)(-[0-9]+)?\s*$/;
    my ($acc2) = $parts[1] =~ /^\s*NX_([A-Z0-9]+)(-[0-9]+)?\s*$/;
    my ($source) = $parts[3] =~ /^\s*([A-Za-z0-9]+)\s*$/;
    my ($pmid) = $parts[4] =~ /\s*([0-9]+)\s*/;
    my ($psimi_id) = $parts[5] =~ /^\s*(MI:[0-9]{4})\s*$/;

    next unless $pmid;

    $psimi_id = 'MI:0045' unless $psimi_id;

    my ($accession1, $accession2) = sort { $a cmp $b } ($acc1, $acc2);

    $select_method_sth->execute($psimi_id);
    my $method = $select_method_sth->fetchrow_hashref;
    $select_method_sth->finish;

    die(sprintf('method not found %s', $psimi_id)) unless $method;

    $select_protein_sth->execute($accession1);
    my $protein1 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s', $accession1)) unless $protein1;

    $select_protein_sth->execute($accession2);
    my $protein2 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s', $accession2)) unless $protein2;

    if ($interactions{$accession1}->{$accession2}) {
        $interactions{$accession1}->{$accession2}->{'sources'}->{$source} = 1;
        $interactions{$accession1}->{$accession2}->{'publications'}->{$pmid} = 1;
        $interactions{$accession1}->{$accession2}->{'methods'}->{$psimi_id} = 1;
        $interactions{$accession1}->{$accession2}->{'is_binary'} = 1 if ($method->{'is_binary'});
        next;
    }

    $interactions{$accession1}->{$accession2} = {
        'protein1_id' => $protein1->{'id'},
        'protein2_id' => $protein2->{'id'},
        'sources' => {$source => 1},
        'publications' => {$pmid => 1},
        'methods' => {$psimi_id => 1},
        'is_binary' => $method->{'is_binary'},
    };

}

$vinland->do('COPY interactions (type, protein1_id, protein2_id, sources, nb_publications, nb_methods, is_gold, is_binary) FROM STDIN');

foreach my $accession1 (natsort keys %interactions) {
    foreach my $accession2 (natsort keys %{$interactions{$accession1}}) {
        my $nb_publications = scalar keys %{$interactions{$accession1}->{$accession2}->{'publications'}};
        my $nb_methods = scalar keys %{$interactions{$accession1}->{$accession2}->{'methods'}};
        my $is_gold = ($nb_publications > 1 || $nb_methods > 1) ? 1 : 0;
        my $is_binary = $interactions{$accession1}->{$accession2}->{'is_binary'};

        $vinland->pg_putcopydata(join("\t", (
            'hh',
            $interactions{$accession1}->{$accession2}->{'protein1_id'},
            $interactions{$accession1}->{$accession2}->{'protein2_id'},
            '{' . join(',', natsort keys %{$interactions{$accession1}->{$accession2}->{'sources'}}) . '}',
            $nb_publications,
            $nb_methods,
            $is_gold,
            $is_binary,
        )) . "\n");
    }
}

$vinland->pg_putcopyend();

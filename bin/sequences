#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use JSON qw(from_json);
use Data::Dumper;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'drakkar', $ENV{'DB_HOSTNAME'}),
    $ENV{'DB_USERNAME'},
    $ENV{'DB_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'vinland', $ENV{'DB_HOSTNAME'}),
    $ENV{'DB_USERNAME'},
    $ENV{'DB_PASSWORD'},
);

my $select_human_proteins_sth = $drakkar->prepare('
    SELECT p.accession, p.name, p.sequences
    FROM proteins AS p, proteins_versions AS pv
    WHERE p.type = \'h\'
    AND p.accession = pv.accession
    AND p.version = pv.version
    ORDER BY accession ASC
');

my $select_viral_proteins_sth = $drakkar->prepare('
    SELECT p.accession, d.name2 AS name, d.start2 AS start, d.stop2 AS stop, p.sequences
    FROM
        associations AS a,
        descriptions AS d,
        proteins AS p,
        proteins_versions AS pv
    WHERE p.type=\'v\'
    AND p.accession = pv.accession
    AND p.version = pv.version
    AND p.id = d.protein2_id
    AND a.id = d.association_id
    AND a.state = \'curated\'
    AND d.deleted_at IS NULL
    GROUP BY p.accession, d.name2, d.start2, d.stop2, p.sequences
    ORDER BY p.accession ASC
');

my $select_protein_sth = $vinland->prepare('
    SELECT id FROM proteins WHERE accession = ? AND name = ?
');

my @sequences = ();

$select_human_proteins_sth->execute;

while (my $protein = $select_human_proteins_sth->fetchrow_hashref) {
    $select_protein_sth->execute($protein->{'accession'}, $protein->{'name'});
    my($protein_id) = $select_protein_sth->fetchrow_array;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $protein->{'accession'}, $protein->{'name'})) if (! $protein_id);

    my $pacc = $protein->{'accession'};
    my $sequences = from_json($protein->{'sequences'});

    foreach my $iacc (keys %{$sequences}) {
        push(@sequences, [
            $protein_id,
            $iacc,
            $pacc eq $iacc ? 1 : 0,
            0,
            $sequences->{$iacc},
            1,
            length($sequences->{$iacc}),
        ]);
    }
}

$select_human_proteins_sth->finish;

$select_viral_proteins_sth->execute;

while (my $protein = $select_viral_proteins_sth->fetchrow_hashref) {
    $select_protein_sth->execute($protein->{'accession'}, $protein->{'name'});
    my($protein_id) = $select_protein_sth->fetchrow_array;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $protein->{'accession'}, $protein->{'name'})) if (! $protein_id);

    my $pacc = $protein->{'accession'};
    my $sequences = from_json($protein->{'sequences'});

    my $canonical = $sequences->{$pacc};

    my $sequence = substr($canonical, $protein->{'start'} - 1, $protein->{'stop'} - $protein->{'start'} + 1);

    my $is_mature = length($canonical) == length($sequence) ? 0 : 1;

    push(@sequences, [
        $protein_id,
        $pacc,
        1,
        $is_mature,
        $sequence,
        $protein->{'start'},
        $protein->{'stop'},
    ]);

    next if $is_mature;

    foreach my $iacc (keys %{$sequences}) {
        next if ($pacc eq $iacc);

        push(@sequences, [
            $protein_id,
            $iacc,
            0,
            0,
            $sequences->{$iacc},
            1,
            length($sequences->{$iacc}),
        ]);
    }
}

$select_viral_proteins_sth->finish;

$vinland->do('COPY sequences(protein_id, accession, is_canonical, is_mature, sequence, start, stop) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@sequences);

$vinland->pg_putcopyend();

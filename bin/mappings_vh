#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use JSON qw(from_json);
use Data::Dumper;

my $drakkar_db = shift @ARGV or die('no drakkar db');
my $vinland_db = shift @ARGV or die('no vinland db');

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $drakkar_db, $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', $vinland_db, $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_descriptions_sth = $drakkar->prepare('
    SELECT stable_id, type, pmid, psimi_id, accession1, name1, mapping1, accession2, name2, mapping2
    FROM dataset
    WHERE type = \'vh\'
    AND state = \'curated\'
    AND is_obsolete1 IS FALSE
    AND is_obsolete2 IS FALSE
    AND deleted_at IS NULL
    ORDER BY accession1 ASC, accession2 ASC
');

my $select_protein_sth = $vinland->prepare('
    SELECT * FROM proteins WHERE accession = ? AND name = ?
');

my $select_edge_sth = $vinland->prepare('
    SELECT * FROM edges WHERE source_id = ? AND target_id = ?
');

my $select_sequence_sth = $vinland->prepare('
    SELECT * FROM sequences WHERE protein_id = ? AND accession = ?
');

my $select_description_sth = $vinland->prepare('
    SELECT d.id
    FROM methods AS m, interactions AS i, descriptions AS d
    WHERE m.id = d.method_id AND i.id = d.interaction_id
      AND d.pmid = ?
      AND m.psimi_id = ?
      AND i.protein1_id = ?
      AND i.protein2_id = ?
');

my @alignments = ();

$select_descriptions_sth->execute;

while (my $vh = $select_descriptions_sth->fetchrow_hashref) {
    my $mapping1 = from_json($vh->{'mapping1'});
    my $mapping2 = from_json($vh->{'mapping2'});

    next if @{$mapping1} == 0 && @{$mapping2} == 0;

    $select_protein_sth->execute($vh->{'accession1'}, $vh->{'name1'});
    my $protein1 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $vh->{'accession1'}, $vh->{'name1'})) unless $protein1;

    $select_protein_sth->execute($vh->{'accession2'}, $vh->{'name2'});
    my $protein2 = $select_protein_sth->fetchrow_hashref;
    $select_protein_sth->finish;

    die(sprintf('protein not found %s - %s', $vh->{'accession2'}, $vh->{'name2'})) unless $protein2;

    $select_description_sth->execute($vh->{'pmid'}, $vh->{'psimi_id'}, $protein1->{'id'}, $protein2->{'id'});
    my $description = $select_description_sth->fetchrow_hashref;
    $select_description_sth->finish;

    unless ($description) {
        die(sprintf('description not found %s - %s - %s - %s', (
            $vh->{'pmid'},
            $vh->{'psimi_id'},
            $protein1->{'accession'},
            $protein2->{'accession'},
        )));
    }

    my @entries = (
        {'source' => $protein1, 'target' => $protein2, 'mapping' => $mapping1},
        {'source' => $protein2, 'target' => $protein1, 'mapping' => $mapping2},
    );

    foreach my $entry (@entries) {
        foreach my $mapping (@{$entry->{'mapping'}}) {
            foreach my $isoform (@{$mapping->{'isoforms'}}) {
                $select_edge_sth->execute($entry->{'source'}->{'id'}, $entry->{'target'}->{'id'});
                my $edge = $select_edge_sth->fetchrow_hashref;
                $select_edge_sth->finish;

                unless ($edge) {
                    die(sprintf('edge not found %s - %s', (
                        $entry->{'source'}->{'accession'},
                        $entry->{'target'}->{'accession'},
                    )));
                }

                $select_sequence_sth->execute($entry->{'source'}->{'id'}, $isoform->{'accession'});
                my $sequence = $select_sequence_sth->fetchrow_hashref;
                $select_sequence_sth->finish;

                unless ($sequence) {
                    die(sprintf('sequence not found %s - %s', (
                        $entry->{'source'}->{'accession'},
                        $isoform->{'accession'},
                    )));
                }

                foreach my $occurrence (@{$isoform->{'occurrences'}}) {
                    push(@alignments, [
                        $edge->{'id'},
                        $sequence->{'id'},
                        $description->{'id'},
                        $occurrence->{'start'},
                        $occurrence->{'stop'},
                        $occurrence->{'identity'},
                        $mapping->{'sequence'},
                    ]);
                }
            }
        }
    }
}

$select_descriptions_sth->finish;

$vinland->do('COPY mappings (edge_id, sequence_id, description_id, start, stop, identity, sequence) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@alignments);

$vinland->pg_putcopyend();

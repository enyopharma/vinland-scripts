#!/usr/bin/env perl
use strict;
use warnings;
use DBI;
use Data::Dumper;

my $drakkar = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'drakkar', $ENV{'DB_PROD_HOSTNAME'}),
    $ENV{'DB_PROD_USERNAME'},
    $ENV{'DB_PROD_PASSWORD'},
);

my $vinland = DBI->connect(
    sprintf('DBI:Pg:database=%s;host=%s', 'vinland', $ENV{'DB_DEV_HOSTNAME'}),
    $ENV{'DB_DEV_USERNAME'},
    $ENV{'DB_DEV_PASSWORD'},
);

my $select_human_proteins_sth = $drakkar->prepare('
    SELECT p.ncbi_taxon_id, p.accession, p.name, p.description
    FROM proteins AS p, proteins_versions AS pv
    WHERE p.type = \'h\'
    AND p.accession = pv.accession
    AND p.version = pv.version
    ORDER BY p.accession ASC
');

my $select_viral_proteins_sth = $drakkar->prepare('
    SELECT DISTINCT ncbi_taxon_id2 AS ncbi_taxon_id, accession2 AS accession, name2 AS name, description2 AS description, taxon2 AS taxon
    FROM dataset
    WHERE type = \'vh\'
    AND state = \'curated\'
    AND is_obsolete1 IS FALSE
    AND is_obsolete2 IS FALSE
    AND deleted_at IS NULL
    ORDER BY accession2 ASC
');

my @proteins = ();

$select_human_proteins_sth->execute;

while (my $protein = $select_human_proteins_sth->fetchrow_hashref) {
    push(@proteins, [
        'h',
        $protein->{'ncbi_taxon_id'},
        $protein->{'accession'},
        $protein->{'name'},
        $protein->{'description'},
        join(' ', $protein->{'accession'}, $protein->{'name'}, $protein->{'description'}),
    ]);
}

$select_human_proteins_sth->finish;

$select_viral_proteins_sth->execute;

while (my $protein = $select_viral_proteins_sth->fetchrow_hashref) {
    push(@proteins, [
        'v',
        $protein->{'ncbi_taxon_id'},
        $protein->{'accession'},
        $protein->{'name'},
        $protein->{'description'},
        join(' ', $protein->{'accession'}, $protein->{'name'}, $protein->{'description'}, $protein->{'taxon'}),
    ]);
}

$select_viral_proteins_sth->finish;

$vinland->do('COPY proteins (type, ncbi_taxon_id, accession, name, description, search) FROM STDIN');

$vinland->pg_putcopydata(join("\t", @{$_}) . "\n") foreach (@proteins);

$vinland->pg_putcopyend();
